#include "../include/Display.hpp"
#include "GL/glew.h"
#include <iostream>

SDLDemo::Display::Display(const unsigned int WIDTH, const unsigned int HEIGHT, const std::string& TITLE)
{
	// SDL Initialisation

	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);	// Restrict maximum version of opengGL to v4
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6);	// Restrict minimum version of opengGL to v6

	// Initialize ALL features of SDL and get return value to check if this worked
	if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
	{
		std::cout << "Error intializing SDL: " << SDL_GetError() << std::endl;
	}
	else
	{
		// Create an SDL window
		m_window = SDL_CreateWindow(TITLE.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WIDTH, HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);

		if (m_window == NULL)
		{
			std::cout << "Error creating window: " << SDL_GetError() << std::endl;
		}
		else
		{
			// Create the context, this tells SDL which graphics library it is working with
			m_glContext = SDL_GL_CreateContext(m_window);
			// TODO do we need to call glewInit()?

			if (m_glContext == NULL)
			{
				std::cout << "Error creating context: " << SDL_GetError() << std::endl;
			}
			// End of SDL initialization
			else
			{
				// Start of OpenGL initialization

				// Make the Projection matrix active.
				// The projection matrix defines the properties of the camera that views the objects in 3D space (zoom, aspect ratio etc)
				glMatrixMode(GL_PROJECTION);
				// Load the identity matrix.
				// Because the projection matrix is currently loaded, this resets the projection matrix settings to defaults (i.e. clears it)
				glLoadIdentity();

				// Check if any errors were generated by previous steps
				if (glGetError() != GL_NO_ERROR)
				{
					std::cout << "Error initializing OpengGL";
				}

				// TODO: Probably don't need to load both matrices, investigate why they were this way on the sample code?

				// Make the Model View matrix active. The modelview matrix defines how your objects are transformed.
				glMatrixMode(GL_MODELVIEW);
				// Load the identity matrix.
				// Because the model view matrix is currently loaded, this resets the model view matrix settings to defaults (i.e. clears it)
				glLoadIdentity();

				// Check if any errors were generated by previous steps
				if (glGetError() != GL_NO_ERROR)
				{
					std::cout << "Error initializing OpengGL";
				}
				// End of OpenGL initialization
			}
		}
	}

	// Enable text input through SDL
	SDL_StartTextInput();
}

SDLDemo::Display::~Display()
{
	SDL_StopTextInput();
	SDL_GL_DeleteContext(m_glContext);
	SDL_DestroyWindow(m_window);
	// Free up the memory used by the window
	m_window = NULL;
	SDL_Quit();
}

void SDLDemo::Display::update()
{
	// Refresh the window to show any changes made in the previous draw function
	SDL_GL_SwapWindow(m_window);
}

void SDLDemo::Display::clear()
{
	// Week 2 - Exercise 1: set clear color to purple
	// glClearColor(173.0, 0.0, 186.0, 0.0);
	// Clear the colour buffer
	// TODO use GL_DEPTH_BUFFER_BIT too
	glClear(GL_COLOR_BUFFER_BIT);
}
